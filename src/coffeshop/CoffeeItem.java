/*
 By using this CoffeItem class admin can add new coffe item in the file
 */
package coffeshop;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class CoffeeItem extends javax.swing.JFrame {

    /**
     * Creates new form CoffeeItem
     */
    private ObjectOutputStream outputStream;
    private ObjectInputStream inputStream;
    private ArrayList<Coffee> coffeeList;
    private File coffeeFile;

    public CoffeeItem() {
        initComponents();

        outputStream = null;
        inputStream = null;
        coffeeList = new ArrayList<>();
        coffeeFile = new File("coffee.txt");

        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        coffee_name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        coffee_price = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        coffee_description = new javax.swing.JTextArea();
        add_item = new javax.swing.JButton();
        update_item = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        coffee_table = new javax.swing.JTable();
        go_back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Add or Update Coffee Item");

        jLabel2.setText("Coffee Name");

        jLabel4.setText("Price");

        jLabel3.setText("Description");

        coffee_description.setColumns(20);
        coffee_description.setRows(5);
        jScrollPane1.setViewportView(coffee_description);

        add_item.setText("Add Item");
        add_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_itemActionPerformed(evt);
            }
        });

        update_item.setText("Update");

        coffee_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Description"
            }
        ));
        jScrollPane2.setViewportView(coffee_table);

        go_back.setText("Go Back");
        go_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(coffee_name)
                            .addComponent(coffee_price)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(add_item)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(update_item))
                                    .addComponent(go_back))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(252, 252, 252))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(go_back))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(coffee_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(14, 14, 14)
                        .addComponent(coffee_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_item)
                    .addComponent(update_item))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadFile() {
        if (coffeeFile.isFile()) {
            try {
                inputStream = new ObjectInputStream(new FileInputStream(coffeeFile));
                coffeeList = (ArrayList<Coffee>) inputStream.readObject();
                inputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("File does't exists!");
        }
    }

    private void loadTable() {

        if (coffeeFile.exists()) {
            loadFile();
        } else {
            System.out.println("No record found!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) coffee_table.getModel();
        model.setRowCount(0);

        Object[] obj = new Object[3];
        for (int i = 0; i < coffeeList.size(); i++) {
            obj[0] = coffeeList.get(i).getCoffeeName();
            obj[1] = coffeeList.get(i).getCoffeePrice();
            obj[2] = coffeeList.get(i).getCoffeeDescription();
            model.addRow(obj);
        }
    }

    private void clearFields() {
        coffee_name.setText("");
        coffee_price.setText("");
        coffee_description.setText("");
    }

    private void add_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_itemActionPerformed

        String coffeeName = "";
        String coffeeDescription = "";
        String coffeeprice = "";

        coffeeName = coffee_name.getText();
        coffeeprice = coffee_price.getText();
        coffeeDescription = coffee_description.getText();

        if (!coffeeName.isEmpty()) {
            if (!coffeeprice.isEmpty()) {
                if (!coffeeDescription.isEmpty()) {

                    try {
                        loadFile();
                        coffeeList.add(new Coffee(coffeeName, Double.parseDouble(coffeeprice), coffeeDescription));
                        outputStream = new ObjectOutputStream(new FileOutputStream(coffeeFile));
                        outputStream.writeObject(coffeeList);
                        outputStream.close();
                        loadTable();
                        clearFields();
                        JOptionPane.showMessageDialog(null, "Item Successfully Added");

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Please enter Coffee description");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter Coffee price");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter Coffee name");
        }

    }//GEN-LAST:event_add_itemActionPerformed

    private void go_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go_backActionPerformed

        Manager manager = new Manager();
        manager.setLocationRelativeTo(null);
        manager.setVisible(true);
        dispose();

    }//GEN-LAST:event_go_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoffeeItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoffeeItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoffeeItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoffeeItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoffeeItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_item;
    private javax.swing.JTextArea coffee_description;
    private javax.swing.JTextField coffee_name;
    private javax.swing.JTextField coffee_price;
    private javax.swing.JTable coffee_table;
    private javax.swing.JButton go_back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton update_item;
    // End of variables declaration//GEN-END:variables
}
